(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{418:function(s,n,e){"use strict";e.r(n);var a=e(27),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"decorator-装饰器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#decorator-装饰器"}},[s._v("#")]),s._v(" Decorator 装饰器")]),s._v(" "),e("Pv",{attrs:{id:3}}),s._v(" "),e("p",[e("strong",[e("code",[s._v("什么是装饰器?")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("装饰器是一种函数，目的是用来修改类及其成员。\nJavascript装饰器还处于草案中，目前没有直接支持该语法的环境，但Babel 已支持其语法转换。\n在TypeScript里也已做为一项实验性特性予以支持。\n在Angular中也进行了大量使用，有很多内置的装饰器。\n实际上就是设计模式中常说的装饰者模式的一种实现\n\n装饰者模式，是指在不必改变原类文件或使用继承的情况下，动态地扩展一个对象的功能，\n为对象增加额外特性的一种设计模式。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[e("code",[s._v("为什么要用装饰器")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("装饰器有方便、高效、语义化更强的特性。\n合理利用装饰器可以极大的提高开发效率、可以封装提炼非内部函数的逻辑代码、\n可以帮助我们快速完成重复性的工作。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"decorator装饰器的使用及实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#decorator装饰器的使用及实例"}},[s._v("#")]),s._v(" Decorator装饰器的使用及实例")]),s._v(" "),e("blockquote",[e("p",[s._v("case 1： 修饰类 基础用法")])]),s._v(" "),e("p",[s._v("给类添加装饰器，自动把类作为第一个参数，传递给装饰器。")]),s._v(" "),e("blockquote",[e("p",[s._v("case 2： 修饰类 并自定义参数")])]),s._v(" "),e("p",[s._v("如果你觉得一个参数不够用，可以在装饰器函数的外层再封装一层函数。不只是装饰器，在"),e("code",[s._v("Vue")]),s._v("中利用闭包的特性，还可以向"),e("code",[s._v("computed和getter")]),s._v("等方法中传递指定的参数。")]),s._v(" "),e("p",[s._v("装饰器在装饰类的属性时，会智能的去装饰该原型，其")]),s._v(" "),e("ul",[e("li",[s._v("第一参数为要装饰的目标元素，")]),s._v(" "),e("li",[s._v("第二个参数为属性名，")]),s._v(" "),e("li",[s._v("第三参数为该属性的描述对象")])]),s._v(" "),e("p",[s._v("装饰器对类的行为的改变，是在代码编译时发生的，而不是在运行时。")]),s._v(" "),e("blockquote",[e("p",[s._v("case3 多个装饰器嵌套的应用")])]),s._v(" "),e("p",[s._v("如果多个装饰器有传参会按顺序执行所有装饰器的外部函数。执行完毕后再用reduce倒序递归执行得到的内部装饰器函数。")]),s._v(" "),e("blockquote",[e("p",[s._v("case4 实现类的多继承")])]),s._v(" "),e("p",[s._v("在js中class没有直接的语法可以实现多重继承，如果要实现多继承，只能使用mixin的方式或用getOwnPropertyNames遍历等间接的手段。如：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class C extends A, B {}        // Error\nclass C extends A extends B {} // Error\nMixin 方法实现\nclass A{}\nfunction Mixin ( BaseClass ) {\n\treturn class extends BaseClass\n\t{\n\t\tmixin(){ console.log('这是混合继承的类的方法，继承生成新的表达式类') }\n\t}\n}\nclass C extends Mixin(A){}\nnew C().mixin() // 这是混合继承的类的方法，继承生成新的表达式类\n\n// getOwnPropertyNames 方式实现\nclass C extend B {} \nfor (let key of Object.getOwnPropertyNames(A.prototype)) {\n if (key === 'constructor') continue \nObject.defineProperty(C.prototype, key, Object.getOwnPropertyDescriptor(A.prototype, key)) \n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[s._v("但有了装饰器，开发人员无需关注上面的具体实现，\n可通过@Decorator，能够帮你省去很多繁琐的步骤来用上装饰器")]),s._v(" "),e("blockquote",[e("p",[s._v("case5 其他常用的简易装饰器")])]),s._v(" "),e("ol",[e("li",[e("strong",[s._v("@readonly 装饰器")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("使属性只读\nclass Person{\n@readonly // 使该属性只读。\nage() {\n}\n}\nfunction readonly(target, name, descriptor){\n    // descriptor对象原来的值如下\n  // {\n  //   value: specifiedFunction,\n  //   enumerable: false,\n  //   configurable: true,\n  //   writable: true\n  // };\n  descriptor.writable = false;\n  return descriptor;\n}\nreadonly(Person.prototype, 'name', descriptor)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[e("strong",[s._v("@getExcuteTime 装饰器，")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("获取某个函数执行开始时间到结束的时间\n以往需要这样\nclass Person{\nsomething1(){\nlet start = Date.now()\n// do something...\nlet end = Date.now()\nconsole.log('执行时间：',end-start)\n}\nsomething2(){\nlet start = Date.now()\n// do something...\nlet end = Date.now()\nconsole.log('执行时间：',end-start)\n}\n}\n使用装饰器,使计时和业务分离\nclass Person{\n@getExcuteTime\nsomething1(){\n// do something...\n}\n@getExcuteTime\nsomething2(){\n// do something...\n}\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("ol",{attrs:{start:"3"}},[e("li",[e("strong",[s._v("@log 装饰器")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("我们不希望日志和业务掺和在一起，这样使用修饰器就避免了这个问题\nclass Person{\n@log('开始第一步')\nstep1() {\n// do something...\n// 无需在函数中写打印的逻辑\n}\n@log('开始第二步')\nstep2() {\n// do something...\n}\n}\n\nfunction log(value) {\n    return function (target, name, descriptor) {\n        // 可以在这里根据参数打印更加详细的信息\n        console.log(value)\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[s._v("还有像登陆(不要重复写一些是否登陆的逻辑)、aixos等装饰器，需要我们自身根据具体需求去实现。")]),s._v(" "),e("blockquote",[e("p",[s._v("其它")])]),s._v(" "),e("p",[s._v("vue项目中使用装饰器，其官方提供的组件"),e("a",{attrs:{href:"https://github.com/vuejs/vue-class-component",target:"_blank",rel:"noopener noreferrer"}},[s._v("装饰器"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("core-decorators.js 提供了一些"),e("a",{attrs:{href:"https://github.com/jayphelps/core-decorators",target:"_blank",rel:"noopener noreferrer"}},[s._v("常用的装饰器方法"),e("OutboundLink")],1)]),s._v(" "),e("Vssue",{attrs:{title:"vssue-blog"}})],1)}),[],!1,null,null,null);n.default=t.exports}}]);